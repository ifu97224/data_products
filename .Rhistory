varChild <- var(galton$child)
varRes <- var(fit$residuals)
varEst <- var(ols.ic)
varEst <- var(est(ols.slop,ols.ic)
)
varEst <- var(est(ols.slope,ols.ic)
)
all.equal(varChild,varEst)
all.equal(varChild,varEst+varRes)
efit <- lm(accel ~ mag+dist,attenu)
mean(efit$resid)
mean(efit$residuals)
cov(efit$residuals,attenu$mag)
cov(efit$residuals,attenu$dist)
cor(gpa_nor,gch_nor)
l_nor <- lm(gca ~ gpa)
l_nor <- lm(gch_nor ~ gpa_nor)
fit <- lm(child ~ parent)
fit <- lm(child ~ parent, data = galton)
((sum(fit$residuals^2))/n-2)^0.5
sqrt(sum(fit$residuals^2) / (n-2))
summary(fit)$sigma
sqrt(deviance(dit)/(n-2)
)
sqrt(deviance(fit)/(n-2))
mu <- mean(galton$child)
sTot <- sum((galton$child - mu)^2)
sRes <- fit$deviance
sRes <- deviance(fit)
(sRes / Stot) -1
(sRes / STot) -1
(sRes / sTot) -1
1-sRes / sTot
summary(fit)$r
summary(fit)$r.squared
(cor(galton$parent,galton$child))^2
cor(galton$parent,galton$child)^2
ones <- rep(1,nrow(glaton))
ones <- rep(1,nrow(galton))
lm(child ~ ones + parent -1,galton)
lm(child ~ parent,galton)
lm(child~1)
lm(child~1,galton)
head(trees)
fit <- lm(Volume ~ Girth + Height + Constant -1, trees)
trees2 <- eliminate("Girth",trees)
head(trees2)
fit2 <- lm(Volume ~ Height + Contant -1)
fit2 <- lm(Volume ~ Height + Contant -1,trees2)
fit2 <- lm(Volume ~ Height + Constant -1,trees2)
lapply(list(fit,fit2),coef)
library(dplyr)
stocks <- data.frame(
time = as.Date('2009-01-01') + 0:9,
X = rnorm(10, 0, 1),
Y = rnorm(10, 0, 2),
Z = rnorm(10, 0, 4)
)
stocks
stocksm <- stocks %>% gather(stock, price, -time)
stocksm
library(tidyr)
stocksm <- stocks %>% gather(stock, price, -time)
stocksm
stocks
stocksm <- stocks %>% gather(stock, price, -time)
stocksm
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
summary(AlzheimerDisease)
Summary(AlzheimerDisease)
data(AlzheimerDisease)
Summary(Predictors)
Summary(predictors)
summary(predictors)
adData = data.frame(diagnosis,predictors)
View(adData)
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
hist(training,SuperPlasticizer)
?hist
hist(training$SuperPlasticizer)
training$SuperPlasticizer
View(training)
View(training)
hist_val <- training$SuperPlasticizer
hist(hist_val)
class(hist_val)
hist_val <- training$SuperPlasticizer
hist_val
head(training)
training$Superplasticizer
hist_val <- training$Superplasticizer
hist(hist_val)
hist_val_log <- log(hist_val)
hist(hist_val_log)
hist_val_log <- log10(hist_val)
hist(hist_val_log)
hist_val <- training$Superplasticizer
hist(hist_val)
hist_val_log <- log(hist_val)
hist(hist_val_log)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
View(predictors)
pred_columns <- training[, -grep("IL$", colnames(training))]
training$Superplasticizer
pred_columns <- training[, -grep("IL$", colnames(training))]
View(pred_columns)
pred_columns <- training[, grep("IL$", colnames(training))]
pred_columns <- training[, grep("IL$", colnames(training))]
colnames(training)
pred_columns <- training[, grep("IL", colnames(training))]
View(pred_columns)
pred_columns <- training[, grep("IL_", colnames(training))]
View(pred_columns)
pred_columns <- training[, grep(^"IL_", colnames(training))]
pred_columns <- training[, grep(/"IL_", colnames(training))]
pred_columns <- training[, grep("^IL_", colnames(training))]
View(pred_columns)
colnames(training)
preProc <- preProcess(pred_columns,method = "PCA")
preProc <- preProcess(pred_columns,method = "pca")
names(preProc)
preProc$rotation
names(preProc)
preProc$numComp
preProc$pcaComp
preProc <- preProcess(pred_columns,method = "pca",tresh=0.8)
names(preProc)
preProc$numComp
preProc <- preProcess(pred_columns,method = "pca",tresh=0.5)
names(preProc)
preProc$numComp
preProc <- preProcess(pred_columns,method = "pca",tresh=50)
names(preProc)
preProc$numComp
preProc <- preProcess(pred_columns,method = "pca",thresh=50)
preProc$numComp
preProc <- preProcess(pred_columns,method = "pca",thresh=80)
preProc$numComp
preProc <- preProcess(pred_columns,method = "pca",thresh=.8)
preProc$numComp
preProc <- preProcess(pred_columns,method = "pca",thresh=.95)
preProc$numComp
preProc <- preProcess(pred_columns,method = "pca",thresh=.8)
preProc$numComp
Summary(training)
summary(training)
colnames(training)
training2 <- training[, c("diagnosis",grep("^IL_", colnames(training)))]
training2 <- training[,"diagnosis"]
training2 <- training[,c("diagnosis","male"]
training2 <- training[,c("diagnosis","male")]
training2 <- training[, c("diagnosis","grep("^IL_", colnames(training))")]
training_pred <- training[, grep("^IL_", colnames(training))]
training_outcome <- training[,"diagnosis"]
training2 <- cbind(training_pred,training_outcome)
View(training2)
rm(list(c(training_pred,training_outcome)))
rm(list(c("training_pred","training_outcome")))
rm(training_pred, training_outcome)
pca_model_fit <- train(diagnosis ~ .,
method = "glm",
preProcess = 'pca', pcaComp = 7,
data = training2)
pca_model_fit <- train(diagnosis ~ .,
method = "glm",
preProcess = 'pca',
data = training2)
View(training2)
training_outcome <- training[,"diagnosis"]
training_outcome <- as.data.frame(training[,"diagnosis"])
View(training_outcome)
training_outcome <- training[,"diagnosis"]
training2 <- cbind(training_pred,training_outcome)
rm(training_pred, training_outcome)
View(training2)
names(training2)[names(training2)=="training_outcome"] <- "diagnosis"
View(training2)
pca_model_fit <- train(diagnosis ~ .,
method = "glm",
preProcess = 'pca',
data = training2)
# build a model using pca
pca_model_fit <- train(diagnosis ~ .,
method = "glm",
preProcess = 'pca', thresh = .8,
data = training2)
ctrl <- trainControl(preProcOptions = list(thresh = 0.8))
pca_model_fit <- train(diagnosis ~ .,
method = "glm",
preProcess = 'pca',
trControl = ctrl,
data = training2)
model_fit <- train(diagnosis ~ .,
method = "glm",
data = training2)
test_pca <- predict(pca_model_fit,testing)
test_fit <- predict(model_fit,testing)
names(test_pca_fit)
test_pca_fit <- predict(pca_model_fit,testing)
names(test_pca_fit)
confusionMatrix(training2$diagnosis,test_pca_fit)
confusionMatrix(training2$diagnosis,predict(pca_model_fit,testing))
names(model_fit)
names(test_fit)
test_fit
confusionMatrix(training2$diagnosis,test_fit)
confusionMatrix(testing$diagnosis,test_fit)
confusionMatrix(testing$diagnosis,pca_model_fit)
confusionMatrix(testing$diagnosis,test_pca_fit)
confusionMatrix(testing$diagnosis,test_fit)
inTrain <- createDataPartition(y=Case,
p=0.7,
list=FALSE,
data=segmentationOriginal)
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
set.seed(125)
inTrain <- createDataPartition(y=Case,
p=0.7,
list=FALSE,
data=segmentationOriginal)
set.seed(125)
inTrain <- createDataPartition(y=segmentationOriginal$Case,
p=0.7,
list=FALSE,
data=)
set.seed(125)
inTrain <- createDataPartition(y=segmentationOriginal$Case,
p=0.7,
list=FALSE)
training <- segmentationOriginal[inTrain,]
testing  <- segmentationOriginal[-inTrain,]
modFit <- train(Case ~ .,
method="rpart",
data=training)
print(modFit$finalModel)
plot(modFit$finalModel,
uniform=TRUE,
main = "Classification Tree",
text(modFit$finalModel, use.n=TRUE, all=TRUE, cex=.8))
plot(modFit$finalModel,
uniform=TRUE,
main = "Classification Tree")
text(modFit$finalModel, use.n=TRUE, all=TRUE, cex=.8)
install.packages("rattle")
library(rattle)
library(rattle)
fancyRpartPlot(modFit$finalModel)
library(rattle)
fancyRpartPlot(modFit$finalModel)
fancyRpartPlot(modFit$finalModel)
install.packages("rattle")
library(rattle)
library(rattle)
fancyRpartPlot(modFit$finalModel)
install.packages("rattle")
library(rattle)
fancyRpartPlot(modFit$finalModel)
install.packages("shiny")
library(shiny)
install.packages("manipulate")
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
install.packages("rCharts")
install.packages("rCharts")
library(rCharts)
install.packages("devtools")
install.packages("rCharts")
require(devtools)
install_github('ramnathv/rCharts')
dTable(airquality, sPaginationType = "full_numbers")
d <- data.frame(airquality, stringsAsFactors = FALSE)print(d)
head(airquality)
library(rCharts)
dTable(airquality, sPaginationType = "full_numbers")
shinyUI(pageWithSidebar(
headerPanel("Data science FTW!"),
sidebarPanel(
h2('Big text'),
h3('Sidebar')
),
mainPanel(
h3('Main Panel text')
)
))
library(shiny)
install.packages("shiny")
library("shiny", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
shinyUI(pageWithSidebar(
headerPanel("Data science FTW!"),
sidebarPanel(
h2('Big text'),
h3('Sidebar')
),
mainPanel(
h3('Main Panel text')
)
))
shiny::runApp('Documents/Coursera Data Science Track/Data Products/Quiz 1')
install.packages("UsingR")
shiny::runApp('Documents/Coursera Data Science Track/Data Products/Quiz 1')
shiny::runApp('Documents/Coursera Data Science Track/Data Products/Quiz 1')
library(shiny)
runExample("01_hello")
runExample("01_hello") # a histogram
runExample("01_hello") # a histogram
shiny::runApp('Documents/Coursera Data Science Track/Data Products/Shiny Tutorial/Lesson 1/Example 1')
setwd("/users/Richard/Documents/Coursera Data Science Track/Data Products/Shiny Tutorial/Lesson 1")
getwd()
runApp("Example 1")
runApp("Example 1")
runApp("Example 1", display.mode = "showcase")
install_github('github','ramnathv')
install_github('github','ramnathv')
install_github('slidifyLibraries','ramnath')
library(slidify)
library('slidify')
install_github('slidifyLibraries','ramnathv')
library(slidify)
library(Slidify)
install_github('slidifyLibraries','ramnathv/slidifyLibraries')
install_github("slidify", "ramnathv")
install_github("slidifyLibraries", "ramnathv")
install_github("slidifyLibraries", "ramnathv")
install_github("slidifyLibraries", "ramnathv")
library(slidify)
shiny::runApp('~/Documents/Coursera Data Science Track/Data Products/Shiny Tutorial/Lesson 2')
shiny::runApp('~/Documents/Coursera Data Science Track/Data Products/Shiny Tutorial/Lesson 2')
shiny::runApp('~/Documents/Coursera Data Science Track/Data Products/Shiny Tutorial/Lesson 2')
shiny::runApp('~/Documents/Coursera Data Science Track/Data Products/Shiny Tutorial/Lesson 2')
shiny::runApp('~/Documents/Coursera Data Science Track/Data Products/Shiny Tutorial/Lesson 2')
shiny::runApp('~/Documents/Coursera Data Science Track/Data Products/Shiny Tutorial/Lesson 2')
shiny::runApp('~/Documents/Coursera Data Science Track/Data Products/Shiny Tutorial/Lesson 2')
shiny::runApp('~/Documents/Coursera Data Science Track/Data Products/Shiny Tutorial/Lesson 2')
shiny::runApp('~/Documents/Coursera Data Science Track/Data Products/Shiny Tutorial/Lesson 2')
shiny::runApp('~/Documents/Coursera Data Science Track/Data Products/Shiny Tutorial/Lesson 2')
shiny::runApp('~/Documents/Coursera Data Science Track/Data Products/Shiny Tutorial/Lesson 2')
shiny::runApp('~/Documents/Coursera Data Science Track/Data Products/Shiny Tutorial/Lesson 2')
shiny::runApp('~/Documents/Coursera Data Science Track/Data Products/Shiny Tutorial/Lesson 2')
shiny::runApp('~/Documents/Coursera Data Science Track/Data Products/Shiny Tutorial/Lesson 2')
shiny::runApp('~/Documents/Coursera Data Science Track/Data Products/Shiny Tutorial/Lesson 2')
shiny::runApp('~/Documents/Coursera Data Science Track/Data Products/Shiny Tutorial/Lesson 2')
shiny::runApp('~/Documents/Coursera Data Science Track/Data Products/Shiny Tutorial/Lesson 2')
shiny::runApp('~/Documents/Coursera Data Science Track/Data Products/Shiny Tutorial/Lesson 2')
shiny::runApp('~/Documents/Coursera Data Science Track/Data Products/Shiny Tutorial/Lesson 2')
shiny::runApp('~/Documents/Coursera Data Science Track/Data Products/Shiny Tutorial/Lesson 2')
shiny::runApp('~/Documents/Coursera Data Science Track/Data Products/Shiny Tutorial/Lesson 2')
shiny::runApp('~/Documents/Coursera Data Science Track/Data Products/Shiny Tutorial/Lesson 2')
shiny::runApp('~/Documents/Coursera Data Science Track/Data Products/Shiny Tutorial/Lesson 2')
shiny::runApp('~/Documents/Coursera Data Science Track/Data Products/Shiny Tutorial/Lesson 2')
shiny::runApp('~/Documents/Coursera Data Science Track/Data Products/Shiny Tutorial/Lesson 2')
shiny::runApp('~/Documents/Coursera Data Science Track/Data Products/Shiny Tutorial/Lesson 2')
shiny::runApp('~/Documents/Coursera Data Science Track/Data Products/Shiny Tutorial/Lesson 2')
shiny::runApp('~/Documents/Coursera Data Science Track/Data Products/Shiny Tutorial/Lesson 2')
shiny::runApp('~/Documents/Coursera Data Science Track/Data Products/Shiny Tutorial/Lesson 2')
shiny::runApp('~/Documents/Coursera Data Science Track/Data Products/Shiny Tutorial/Lesson 2')
shiny::runApp('~/Documents/Coursera Data Science Track/Data Products/Shiny Tutorial/Lesson 2')
shiny::runApp('~/Documents/Coursera Data Science Track/Data Products/Shiny Tutorial/Lesson 2')
shiny::runApp('~/Documents/Coursera Data Science Track/Data Products/Shiny Tutorial/Lesson 3')
shiny::runApp('~/Documents/Coursera Data Science Track/Data Products/Shiny Tutorial/Lesson 3')
shiny::runApp('~/Documents/Coursera Data Science Track/Data Products/Shiny Tutorial/Lesson 3')
shiny::runApp('~/Documents/Coursera Data Science Track/Data Products/Shiny Tutorial/Lesson 3')
shiny::runApp('~/Documents/Coursera Data Science Track/Data Products/Shiny Tutorial/Lesson 3')
shiny::runApp('~/Documents/Coursera Data Science Track/Data Products/Shiny Tutorial/Lesson 3')
shiny::runApp('~/Documents/Coursera Data Science Track/Data Products/Shiny Tutorial/Lesson 3')
shiny::runApp('~/Documents/Coursera Data Science Track/Data Products/Shiny Tutorial/Lesson 3')
shiny::runApp('~/Documents/Coursera Data Science Track/Data Products/Shiny Tutorial/Lesson 3')
shiny::runApp('~/Documents/Coursera Data Science Track/Data Products/Shiny Tutorial/Lesson 3')
shiny::runApp('~/Documents/Coursera Data Science Track/Data Products/Shiny Tutorial/Lesson 3')
shiny::runApp('~/Documents/Coursera Data Science Track/Data Products/Shiny Tutorial/Lesson 3')
shiny::runApp('~/Documents/Coursera Data Science Track/Data Products/Shiny Tutorial/Lesson 4/census-app')
shiny::runApp('~/Documents/Coursera Data Science Track/Data Products/Shiny Tutorial/Lesson 4/census-app')
shiny::runApp('~/Documents/Coursera Data Science Track/Data Products/Shiny Tutorial/Lesson 4/census-app')
runApp("censusVis", display.mode = "showcase")
setwd("/users/Richard/Documents/Coursera Data Science Track/Data Products/Shiny Tutorial/Lesson 4")
setwd("/users/Richard/Documents/Coursera Data Science Track/Data Products/Shiny Tutorial/Lesson 4/census-app")
runApp("censusVis", display.mode = "showcase")
setwd("/users/Richard/Documents/Coursera Data Science Track/Data Products/Shiny Tutorial/Lesson 4/")
runApp("census-app", display.mode = "showcase")
shiny::runApp('census-app')
install.packages(c("maps", "mapproj"))
library(maps)
library(mapproj)
source("census-app/helpers.R")
counties <- readRDS("census-app/data/counties.rds")
percent_map(counties$white, "darkgreen", "% white")
percent_map(counties$white, "darkgreen", "% white")
library(maps)
library(mapproj)
getwd()
setwd("/users/Richard/Documents/Coursera Data Science Track/Data Products/Shiny Tutorial/Lesson 5/")
library(maps)
library(mapproj)
source("census-app/helpers.R")
counties <- readRDS("census-app/data/counties.rds")
percent_map(counties$white, "darkgreen", "% white")
View(counties)
shiny::runApp('census-app')
shiny::runApp('census-app')
shiny::runApp('census-app')
runApp("census-app", display.mode = "showcase")
shiny::runApp('census-app')
shiny::runApp('census-app')
shiny::runApp('census-app')
shiny::runApp('census-app')
ls
ls()
getwd()
setwd("/users/Richard/Documents/Coursera Data Science Track/Data Products/Shiny Tutorial/Lesson 6/")
install.packages("quantmod")
runApp("stockVis")
runApp("stockVis")
shiny::runApp('stockVis')
shiny::runApp('stockVis')
shiny::runApp('~/Documents/Coursera Data Science Track/Data Products/Project')
setwd("/users/Richard/Documents/Coursera Data Science Track/Data Products/Project")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
